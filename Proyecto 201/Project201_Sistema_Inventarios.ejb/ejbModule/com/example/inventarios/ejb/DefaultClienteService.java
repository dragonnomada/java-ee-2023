package com.example.inventarios.ejb;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import javax.annotation.Resource;
import javax.ejb.Stateful;
import javax.inject.Inject;
import javax.sql.DataSource;

import com.example.inventarios.model.Cliente;
import com.example.inventarios.model.Paquete;
import com.example.inventarios.service.ClienteService;
import com.example.inventarios.service.PaqueteService;

@Stateful
public class DefaultClienteService implements ClienteService {

	Logger logger = Logger.getLogger(getClass().getName());
	
	@Inject
	PaqueteService paqueteService;

	@Resource(lookup = "jdbc/inventarios")
	DataSource dataSource;

	private PreparedStatement getPreparedStatement(String sql) throws SQLException {
		return dataSource.getConnection().prepareStatement(sql);
	}

	private PreparedStatement getPreparedStatement(String sql, int autoGeneratedKeys) throws SQLException {
		return dataSource.getConnection().prepareStatement(sql, autoGeneratedKeys);
	}

	@Override
	public Cliente agregarCliente(Cliente cliente) {
		String sql = "insert into clientes " + "(nombre, apellidos, correo, direccion1, direccion2) "
				+ "values (?, ?, ?, ?, ?)";

		try {

			PreparedStatement statement = getPreparedStatement(sql, Statement.RETURN_GENERATED_KEYS);

			statement.setString(1, cliente.getNombre());
			statement.setString(2, cliente.getApellidos());
			statement.setString(3, cliente.getCorreo());
			statement.setString(4, cliente.getDireccion1());
			statement.setString(5, cliente.getDireccion2());

			statement.executeUpdate();

			ResultSet resultSet = statement.getGeneratedKeys();

			resultSet.next();

			long clienteId = resultSet.getLong(1);

			return buscarCliente(clienteId);

		} catch (SQLException e) {
			logger.warning("agregarCliente: " + e.getMessage());
		}

		return null;
	}

	private Cliente mapCliente(ResultSet resultSet) {
		Cliente cliente = new Cliente();

		try {
			cliente.setClientId(resultSet.getLong("id"));
			cliente.setNombre(resultSet.getString("nombre"));
			cliente.setApellidos(resultSet.getString("apellidos"));
			cliente.setCorreo(resultSet.getString("correo"));
			cliente.setDireccion1(resultSet.getString("direccion1"));
			cliente.setDireccion2(resultSet.getString("direccion2"));
		} catch (SQLException e) {
			logger.warning("mapCliente: " + e.getMessage());
		}

		return cliente;
	}

	@Override
	public Cliente buscarCliente(long id) {
		String sql = "select * from clientes where id = ? limit 1";

		try {

			PreparedStatement statement = getPreparedStatement(sql, Statement.RETURN_GENERATED_KEYS);

			statement.setLong(1, id);

			ResultSet resultSet = statement.executeQuery();

			if (resultSet.next()) {
				return mapCliente(resultSet);
			}

		} catch (SQLException e) {
			logger.warning("buscarCliente: " + e.getMessage());
		}

		return null;
	}

	@Override
	public Cliente buscarCliente(String correo) {
		String sql = "select * from clientes where correo like %?% limit 1";

		try {

			PreparedStatement statement = getPreparedStatement(sql, Statement.RETURN_GENERATED_KEYS);

			statement.setString(1, correo);

			ResultSet resultSet = statement.executeQuery();

			if (resultSet.next()) {
				return mapCliente(resultSet);
			}

		} catch (SQLException e) {
			logger.warning("buscarCliente/correo: " + e.getMessage());
		}

		return null;
	}

	@Override
	public Cliente buscarCliente(String nombre, String apellidos) {
		String sql = "select * from clientes where nombre like %?% or apellidos %?% limit 1";

		try {

			PreparedStatement statement = getPreparedStatement(sql, Statement.RETURN_GENERATED_KEYS);

			statement.setString(1, nombre);
			statement.setString(2, apellidos);

			ResultSet resultSet = statement.executeQuery();

			if (resultSet.next()) {
				return mapCliente(resultSet);
			}

		} catch (SQLException e) {
			logger.warning("buscarCliente/nombre+apellidos: " + e.getMessage());
		}

		return null;
	}

	@Override
	public List<Cliente> buscarClientes() {
		String sql = "select * from clientes";

		try {

			PreparedStatement statement = getPreparedStatement(sql, Statement.RETURN_GENERATED_KEYS);

			ResultSet resultSet = statement.executeQuery();

			List<Cliente> clientes = new ArrayList<Cliente>();

			while (resultSet.next()) {
				clientes.add(mapCliente(resultSet));
			}

			return clientes;

		} catch (SQLException e) {
			logger.warning("buscarClientes: " + e.getMessage());
		}

		return null;
	}

	@Override
	public List<Cliente> buscarClientesConPaquete() {
		// TODO: Buscar clientes extendiendo la tabla paquetes
		//       y determinar si el cliente aparece como clienteEntradaId
		//       o clienteSalidadId
		List<Cliente> clientes = buscarClientes();
		
		for (Cliente cliente : clientes) {
			List<Paquete> paquetes = paqueteService.buscarPaquetesByCliente(cliente.getClientId());
			if (paquetes.size() == 0) {
				clientes.remove(cliente);
			}
		}
		
		return clientes;
	}

	@Override
	public List<Cliente> buscarClientesConPaquete(boolean esEntrada) {
		// TODO: Buscar clientes extendiendo la tabla paquetes
		//       y determinar si el cliente aparece como clienteEntradaId
		//       o clienteSalidadId
		List<Cliente> clientes = buscarClientes();
		
		for (Cliente cliente : clientes) {
			List<Paquete> paquetes = paqueteService.buscarPaquetesByCliente(cliente.getClientId());
			
			for (Paquete paquete : paquetes) {
				if (esEntrada) {
					if (paquete.getClienteEntradaId() != cliente.getClientId()) {
						paquetes.remove(paquete);
					}
				} else {
					if (paquete.getClienteSalidaId() != cliente.getClientId()) {
						paquetes.remove(paquete);
					}
				}
			}
			
			if (paquetes.size() == 0) {
				clientes.remove(cliente);
			}
		}
		
		return clientes;
	}

	@Override
	public Cliente actualizarCliente(long transaccionId, Cliente cliente) {
		String sql = "update clientes set "
				+ "nombre = ?, apellidos = ?, "
				+ "correo = ?, direccion1 = ?, direccion2 = ? "
				+ "where id = ? limit 1";

		try {

			PreparedStatement statement = getPreparedStatement(sql);

			statement.setString(1, cliente.getNombre());
			statement.setString(2, cliente.getApellidos());
			statement.setString(3, cliente.getCorreo());
			statement.setString(4, cliente.getDireccion1());
			statement.setString(5, cliente.getDireccion2());
			statement.setLong(6, cliente.getClientId());

			statement.executeUpdate();

			return buscarCliente(cliente.getClientId());

		} catch (SQLException e) {
			logger.warning("actualizarCliente: " + e.getMessage());
		}

		return null;
	}

}
